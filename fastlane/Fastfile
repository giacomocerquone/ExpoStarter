fastlane_version "2.28.3"

default_platform :android

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Submit a new Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :alpha do
    sigh
    increment_build_number(xcodeproj: './ios/MyApp.xcodeproj') # Increment the build number
    gym(scheme: "MyApp", project: './ios/MyApp.xcodeproj') # Build the app
    pilot(skip_submission: true) # Upload the app to TestFlight
  end

  after_all do |lane|
    slack(channel: "deploys", message: "Successfully deployed new MyApp alpha update to TestFlight.")
  end
end

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Build an APK file"
  lane :build_apk do
    gradle(task: 'clean', project_dir: "./android/") # Clean the Gradle project
    gradle(task: "assemble", build_type: "Release", project_dir: "./android/") # Build the APK
  end

  desc "Submit APK build to Play Store (Alpha)"
  lane :upload_apk do
    build()
    supply(track: "alpha", apk: "android/app/build/outputs/apk/app-release.apk") # Upload the APK to the Play Store
  end

  desc "Build an AAB file"
  lane :build_aab do
    gradle(task: 'clean', project_dir: "./android/") # Clean the Gradle project
    gradle(task: "bundle", build_type: "Release", project_dir: "./android/") # Build the APK
  end

  desc "Submit AAB build to Play Store (Alpha)"
  lane :upload_aab do
    build()
    #supply(track: "alpha", apk: "android/app/build/outputs/apk/app-release.apk") # Upload the APK to the Play Store
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
